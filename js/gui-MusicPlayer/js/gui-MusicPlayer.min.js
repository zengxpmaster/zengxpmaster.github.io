"use strict"; window.addEventListener('DOMContentLoaded', function () {
    var playerEle = document.querySelectorAll('#gui-MusicPlayer, .gui-MusicPlayer');
    if (playerEle.length === 0) { return; }
    if (typeof Symbol !== 'function' || typeof Promise !== 'function' || typeof Object.assign !== 'function' || typeof Array.from !== 'function' || typeof Array.prototype.includes !== 'function' || typeof (() => { }) !== 'function' || typeof `template ${'string'}` !== 'string' || ({}).toString.call({ ...{} }) !== '[object Object]' || Array.isArray([]) !== true) {
        this.alert('当前浏览器不支持解析 ES6 语法，无法使用“gui-MusicPlayer”插件，请升级您的浏览器！'); window.location.href = 'http://support.dmeng.net/upgrade-your-browser.html?referrer=' + encodeURIComponent(window.location.href); return;
    }


    const guiHead = document.head;

    const playerBody = document.body;

    const metaViewport = document.querySelector('meta[name="viewport"]');
    if (!metaViewport) {
        let newMeta = document.createElement('meta');
        newMeta.setAttribute('name', 'viewport'); newMeta.setAttribute('content', 'width=device-width, initial-scale=1.0'); guiHead.appendChild(newMeta);
    }

    let MusicPlayer = [...playerEle]; if (MusicPlayer.length > 1) { MusicPlayer.splice(1); } MusicPlayer = MusicPlayer[0];

    let interfaceAndLocal = MusicPlayer.getAttribute('data-localMusic');


    const guiSongList = MusicPlayer.getAttribute('data-songList');

    let musicApi = `${location.protocol}//${MusicPlayer.getAttribute('data-musicApi')}`.trim();
    if (musicApi.slice(-4) === 'null') {
        musicApi = `${location.protocol}//musicapi.cenguigui.cn`;
    }
    if (musicApi.slice(-4) === 'null' && interfaceAndLocal === null && guiSongList === null) {
        this.alert('请输入音乐API域名');
        return;
    } customFile(); function customFile() {


        const cdnName = MusicPlayer.getAttribute('data-cdnName');

        const wl = window.location;
        let guiDomainName = cdnName === null ? `${wl.protocol}//${wl.hostname}${wl.port ? ':' + wl.port : ''}` : cdnName.trim(); if (wl.protocol === 'https:') {

            const metaTag = document.createElement('meta'); metaTag.setAttribute('http-equiv', 'Content-Security-Policy'); metaTag.setAttribute('content', 'upgrade-insecure-requests'); guiHead.appendChild(metaTag);
        }

        const removeDotAndSlash = str => str.replace(/(^[^a-zA-Z0-9]+)|([^a-zA-Z0-9]+$)/g, '');

        const filePath = MusicPlayer.getAttribute('data-filePath'); if (filePath !== null) { guiDomainName += `/${removeDotAndSlash(filePath)}`; }

        const appendStylesheet = href => {

            const link = document.createElement('link'); link.rel = 'stylesheet'; link.href = href; if (cdnName !== null && cdnName !== '') { return guiHead.appendChild(link); } else { return new Promise((resolve, reject) => { fetch(href).then(response => { if (response.ok) { guiHead.appendChild(link); resolve(); } else { reject(`链接不可用: ${href}`); } }).catch(error => { reject(`发生错误：${error}`); }); }); }
        };


        const guiCssOne = 'guiplayIcon.min.css' || 'guiplayIcon.css';


        const guiCssTow = 'gui-MusicPlayer.min.css' || 'gui-MusicPlayer.css';

        let guiplayIconCSS = `${guiDomainName}/gui-MusicPlayer/icon/${guiCssOne}`;

        let MusicPlayerCSS = `/css/${guiCssTow}`;
        if (location.protocol === 'file:') {
            guiplayIconCSS = 'https://y.cenguigui.cn/js/gui-MusicPlayer/icon/guiplayIcon.min.css'; MusicPlayerCSS = '/css/gui-MusicPlayer.min.css';
            musicApi = 'https://musicapi.cenguigui.cn';
        }
        Promise.all([appendStylesheet(guiplayIconCSS), appendStylesheet(MusicPlayerCSS),]).catch(error => { MusicPlayer.remove(); console.error(error); alert('请把插件放在网页根目录，否则无法运行【gui-MusicPlayer.js】插件！'); return; });
    } startExecutionPlayer(); function startExecutionPlayer() {

        const characterToElement = (str, mainBox) => {


            const parser = new DOMParser();

            let ele = parser.parseFromString(str, 'text/html');
            ele = ele.body.firstChild; mainBox.appendChild(ele);
        };

        let musicStr = `<div class="gui-MusicPlayer-Main"><div class="gui-switchPlayer"><i class="iconfont icon-jiantou2"></i></div><div class="gui-insideSong"><div class="gui-songPicture"><img src="https://y.cenguigui.cn/js/gui-MusicPlayer/images/playerLoad.gif"alt="加载中..."class="gui-musicPicture"><i class="gui-musicalNote iconfont icon-yinle"></i><i class="gui-musicalNote iconfont icon-yinle"></i><i class="gui-musicalNote iconfont icon-yinle"></i></div><div class="gui-musicControl"><div class="gui-topControl"><div class="gui-introduce"><h3 class="gui-songName"></h3><p class="gui-singer"></p></div><ul class="gui-playerControl"><li class="gui-previousSong"><i class="iconfont icon-shangyishou"></i></li><li class="gui-playbackControl"><i class="gui-pause iconfont icon-zantingtingzhi"style="display: none;"></i><i class="gui-playBack iconfont icon-bofang"style="display: block;"></i></li><li class="gui-nextSong"><i class="iconfont icon-xiayishou"></i></li></ul></div><ul class="gui-bottomControl"><li class="gui-audioFrequency"><i class="iconfont icon-shengyin-kai"></i></li><li class="gui-progressBar"><h5 class="gui-totalAudioProgress"><p class="gui-audioProgress"style="width: 0;"></p></h5></li><li class="gui-playlistBtn"><i class="iconfont icon-gedan"></i></li></ul></div></div><div class="gui-outsideSongList"><ul class="gui-listOfSongs"></ul></div></div>`;

        let lyricStr = `<div id="gui-lyric"><ul class="gui-AllLyric-box"></ul></div>`;
        characterToElement(musicStr, MusicPlayer); allPlayerFeatures();
        function allPlayerFeatures() {


            const guiAudio = document.createElement('audio'); guiAudio.id = 'gui-musicAudio'; playerBody.appendChild(guiAudio);


            const guiMusicAudio = document.getElementById('gui-musicAudio'); guiMusicAudio.controls = 0;
            if (interfaceAndLocal === null) {
                characterToElement(lyricStr, playerBody);
            }

            const setTimeoutPromise = delay => new Promise(resolve => setTimeout(resolve, delay));

            const playMusic = () => guiMusicAudio.play().catch(error => console.warn(`浏览器默认限制了自动播放：${error}`));

            const pauseMusic = () => guiMusicAudio.pause();

            const MusicPlayerMain = MusicPlayer.querySelector('.gui-MusicPlayer-Main'), switchPlayer = MusicPlayer.querySelector('.gui-switchPlayer'), switchArrow = switchPlayer.querySelector('.icon-jiantou2'), musicPicture = MusicPlayer.querySelector('.gui-musicPicture'), songName = MusicPlayer.querySelector('.gui-songName'), singer = MusicPlayer.querySelector('.gui-singer'), previousSong = MusicPlayer.querySelector('.gui-previousSong'), playbackControl = MusicPlayer.querySelector('.gui-playbackControl'), pause = playbackControl.querySelector('.gui-pause'), playBack = playbackControl.querySelector('.gui-playBack'), nextSong = MusicPlayer.querySelector('.gui-nextSong'), audioFrequency = MusicPlayer.querySelector('.gui-audioFrequency'), totalAudioProgress = MusicPlayer.querySelector('.gui-totalAudioProgress'), audioProgress = MusicPlayer.querySelector('.gui-audioProgress'), playlistBtn = MusicPlayer.querySelector('.gui-playlistBtn'), outsideSongList = MusicPlayer.querySelector('.gui-outsideSongList'), listOfSongs = MusicPlayer.querySelector('.gui-listOfSongs'), musicalNote = MusicPlayer.querySelectorAll('.gui-musicalNote'), guiLyric = playerBody.querySelector('#gui-lyric');


            const themeStyle = MusicPlayer.getAttribute('data-themeColor'); themeStyle === null ? MusicPlayerMain.classList.add('gui-original') : MusicPlayerMain.classList.add(themeStyle);

            const lazyLoadImages = () => {

                const images = playerBody.querySelectorAll('img[data-musicLjz-src]');

                const observer = new IntersectionObserver((entries, observer) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {

                            const img = entry.target;

                            const src = img.getAttribute('data-musicLjz-src'); img.setAttribute('src', src); img.onload = () => { observer.unobserve(img); img.removeAttribute('data-musicLjz-src'); };
                        }
                    });
                }); images.forEach(image => observer.observe(image));
            };

            const removebePlaying = () => { pause.style.display = 'none'; playBack.style.display = 'block'; playbackControl.classList.remove('gui-bePlaying'); musicPicture.classList.add('gui-pauseRotation'); musicalNote.forEach(ele => ele.classList.add('gui-pausePdyMove')); if (interfaceAndLocal === null) { guiLyric.classList.add('gui-lyricHidden'); guiLyric.classList.remove('gui-lyricShow'); } };

            const addPlaying = () => { pause.style.display = 'block'; playBack.style.display = 'none'; playbackControl.classList.add('gui-bePlaying'); musicPicture.classList.remove('gui-pauseRotation'); musicalNote.forEach(ele => ele.classList.remove('gui-pausePdyMove')); if (interfaceAndLocal === null) { guiLyric.classList.remove('gui-lyricHidden'); guiLyric.classList.add('gui-lyricShow'); } };

            const backgroundColors = ['rgba(85, 0, 255, .35)', 'rgba(0, 225, 255, .35)', 'rgba(255, 165, 0, .35)', 'rgba(0, 100, 0, .35)', 'rgba(80, 0, 0, .35)', 'rgba(255, 192, 203, .35)'];

            const themeIndex = { 'gui-original': 0, 'gui-sky': 1, 'gui-orange': 2, 'gui-darkGreen': 3, 'gui-wineRed': 4, 'gui-girlPink': 5 };

            const bgIndex = themeIndex[themeStyle] ?? 0;
            let guiMusicPop;
            let isAnimationInProgress = 0;

            const displayPopup = async musicName => {
                if (isAnimationInProgress) { return; } if (!guiMusicPop) { guiMusicPop = document.createElement('div'); guiMusicPop.classList.add('gui-music-pop'); playerBody.appendChild(guiMusicPop); } guiMusicPop.textContent = musicName;

                const musicPopStyle = guiMusicPop.style;

                const randomColor = backgroundColors[bgIndex]; Object.assign(musicPopStyle, { backgroundColor: randomColor }); isAnimationInProgress = 1; musicPopStyle.left = '-100%'; await setTimeoutPromise(500); musicPopStyle.left = 0; await setTimeoutPromise(2500); musicPopStyle.left = '-100%'; isAnimationInProgress = 0;
            };

            const detectionPlay = async () => { await setTimeoutPromise(2000); if (guiMusicAudio.paused) { console.warn('您的浏览器不支持自动播放音乐，请手动点击播放器继续欣赏歌曲吧~'); removebePlaying(); } else { displayPopup(`正在播放：${songName.textContent}`); addPlaying(); } };

            const fadeOutPlayer = async () => { if (MusicPlayer.getAttribute('data-fadeOutAutoplay') !== null) { guiMusicAudio.autoplay = true; await setTimeoutPromise(1000); detectionPlay(); switchArrow.classList.add('gui-jiantou1'); MusicPlayerMain.classList.add('gui-playerShow'); playMusic(); } else { removebePlaying(); } }; fadeOutPlayer();

            const clearTheDefaultPlayerProperties = () => { guiMusicAudio.src = ''; musicPicture.src = ''; songName.textContent = ''; singer.textContent = ''; musicPicture.alt = ''; listOfSongs.innerHTML = ''; };

            const playerMusicItem = (index, music, picture, Title, Author, loadingTime) => {
                let lis = `<li class="gui-songsItem"data-index="${index}"data-mp3url="${music}"><div class="gui-songListSongPictures"><i class="gui-songIcon iconfont icon-bofang"></i><img data-musicLjz-src="${picture + '?param=200x200'}"src="https://y.cenguigui.cn/js/gui-MusicPlayer/images/playerLoad.gif"alt="songPicture"class="gui-playlistImg"></div><div class="gui-playlistSongInformation"><div class="gui-songTitle"><h5 class="gui-songName">${Title}</h5><p class="gui-authorAndDuration"><sapn class="gui-songAuthor">${Author}</sapn><span class="gui-songLength iconfont icon-shijian">\t${loadingTime}</span></p></div></div></li>`; characterToElement(lis, listOfSongs);
            }; async function fetchData(url, method = 'GET', headers = {}, body = null) {
                try {

                    const res = await fetch(url, { method: method, headers: headers, body: body });

                    const data = await res.json(); return data;
                } catch (error) { throw error; }
            }
            let songChart = MusicPlayer.getAttribute('data-songChart') || '热歌榜';

            const randomSongList = MusicPlayer.getAttribute('data-randomSongList'); if (randomSongList === '' || randomSongList === '1' || randomSongList === 'true') {
                let SongListArr = ['热歌榜', '新歌榜', '原创榜', '飙升榜']; songChart = SongListArr[Math.floor(Math.random() * SongListArr.length)];
            } console.log(`%c 正在播放${songChart}的歌曲~`, 'color: #b3c4ec;');

            const musicUrl = musicLinks(); function musicLinks() { if (interfaceAndLocal === null && guiSongList === null) { return `${musicApi}/musicAll/?sortAll=${songChart.trim()}`; } else if (interfaceAndLocal === null && guiSongList !== null) { return `${musicApi}/musicAll/?playlistId=${guiSongList.trim()}`; } else { return interfaceAndLocal.trim(); } }

            const addLeadingZero = num => num < 10 ? `0${num}` : num; function convertTime(duration) {

                const minutes = Math.floor(duration / 60);

                const seconds = Math.floor(duration % 60);

                const minutesDisplay = addLeadingZero(minutes);

                const secondsDisplay = addLeadingZero(seconds); return `${minutesDisplay}:${secondsDisplay}`;
            } function millisecondConversion(milliseconds) {

                const minutes = addLeadingZero(Math.floor(milliseconds / 60000));

                const seconds = addLeadingZero(Math.floor((milliseconds % 60000) / 1000)); return `${minutes}:${seconds} `;
            }

            const clickControl = () => {
                let isFunctionTriggered = false;

                const togglePlayback = () => {

                    const domLength = MusicPlayer.getElementsByClassName('gui-bePlaying').length; if (domLength > 0) { displayPopup('音乐已暂停'); pauseMusic(); removebePlaying(); } else { displayPopup(`正在播放：${songName.textContent}`); playMusic(); addPlaying(); isFunctionTriggered = true; }
                }; playbackControl.addEventListener('click', togglePlayback); window.addEventListener('keyup', e => { e = event; if (e.key === ' ' || e.keyCode === 32) { togglePlayback(); } }); audioFrequency.addEventListener('click', function () { guiMusicAudio.muted = !guiMusicAudio.muted; if (guiMusicAudio.muted) { displayPopup('开启静音'); this.children[0].classList.remove('icon-shengyin-kai'); this.children[0].classList.add('icon-shengyin-guan'); } else { displayPopup('取消静音'); this.children[0].classList.add('icon-shengyin-kai'); this.children[0].classList.remove('icon-shengyin-guan'); } }); MusicPlayerMain.style.opacity = 0;

                const loadguiPlayer = async (dom, val, key) => {

                    const guiStyle = window.getComputedStyle(dom); await setTimeoutPromise(1000); if (guiStyle.getPropertyValue(val) === key) { displayPopup('播放器加载中...'); clearTheDefaultPlayerProperties(); }
                }; loadguiPlayer(MusicPlayerMain, 'opacity', '0');
                let lisNum = 0;

                const playBackAndForth = async () => {
                    try {
                        let res = await fetchData(musicUrl); if (interfaceAndLocal === null && guiSongList !== null) { res = res.playlist.tracks; } await Promise.all(res.map(async data => {

                            const musicId = data.id;

                            const musicName = data.name;

                            const artistsname = data.artistsname || data.al.name;

                            const picurl = data.picurl || data.al.picUrl;

                            const mp3 = data.url || `${musicApi}/musicAll/?songId=${musicId}&mp3Url=mp3`;

                            const duration = interfaceAndLocal === null ? data.duration !== undefined ? convertTime(data.duration) : millisecondConversion(data.dt) : data.musicDuration; playerMusicItem(musicId, mp3, picurl, musicName, artistsname, duration);
                        }));

                        const checkSongsItemLength = () => {
                            return new Promise(resolve => {

                                const startTime = Date.now();

                                const intervalId = setInterval(() => {
                                    lisNum = MusicPlayer.querySelectorAll('.gui-songsItem').length;

                                    const analyticQuantity = res.length; if (lisNum === analyticQuantity) {
                                        clearInterval(intervalId);

                                        const endTime = Date.now();

                                        const waitTime = endTime - startTime; resolve(waitTime);
                                    }
                                }, 30);
                            });
                        }; checkSongsItemLength().then(async waitTime => {
                            await setTimeoutPromise(waitTime); if (waitTime <= 100) { console.log(`%c 播放器接口加载耗时：${waitTime}ms`, 'color: #60a060'); } else if (waitTime <= 5000) { console.log(`%c 播放器接口加载耗时：${waitTime}ms`, 'color: #ffb87a'); } else { console.error(`%c 播放器接口加载超时！`, 'color: #a51212'); MusicPlayer.remove(); }
                            let songsItem = MusicPlayer.querySelectorAll('.gui-songsItem'); if (songsItem.length === 0) { console.error('歌曲未被添加...'); return; }
                            let currentSongIndex = 0;

                            const getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;

                            const randomSong = getRandomInt(0, songsItem.length);

                            const songStr = MusicPlayer.getAttribute('data-random'); if (songStr !== null && songStr !== 'false') { if (songStr !== '' && !isNaN(Number(songStr))) { currentSongIndex = Number(songStr) > 0 && songStr <= songsItem.length ? Number(songStr) - 1 : 0; } else { currentSongIndex = randomSong; } }

                            const updateSong = index => {
                                MusicPlayerMain.style.opacity = 1;
                                let eleInExecution; songsItem.forEach((ele, i) => {
                                    ele.classList.toggle('gui-inExecution', i === index);

                                    const filteredinExecution = Array.from(songsItem).filter(ele => ele.classList.contains('gui-inExecution')); eleInExecution = filteredinExecution; ele.querySelector('.gui-songListSongPictures .gui-songIcon').classList.remove('icon-zantingtingzhi');
                                });

                                const item = songsItem[index];

                                const itemPic = (item.querySelector('.gui-playlistImg')?.getAttribute('data-musicljz-src')) ?? item.querySelector('.gui-playlistImg')?.src;

                                const itemUrl = item.dataset.mp3url;

                                const itemName = item.querySelector('.gui-songName').textContent;

                                const itemAuto = item.querySelector('.gui-songAuthor').textContent; guiMusicAudio.src = itemUrl; musicPicture.src = itemPic; musicPicture.alt = itemName; songName.textContent = itemName; singer.textContent = itemAuto;

                                const guiSongIcon = eleInExecution[0].querySelector('.gui-songListSongPictures .gui-songIcon'); guiSongIcon.classList.add('icon-zantingtingzhi'); if (isFunctionTriggered || MusicPlayer.getAttribute('data-fadeOutAutoplay') !== null) { playMusic(); addPlaying(); displayPopup(`正在播放：${itemName}`); }

                                const lyricsShowOrHide = MusicPlayer.getAttribute('data-lyrics'); 
                                if (interfaceAndLocal === null && lyricsShowOrHide !== '0' && lyricsShowOrHide !== 'false') {
                                    guiLyric.style.backgroundColor = backgroundColors[bgIndex];
                                    let guiAllLyri = guiLyric.querySelector('.gui-AllLyric-box');

                                    const musicLyric = eleInExecution[0].dataset.index;

                                    const wyLyric = `${musicApi}/musicAll/?lyric=${musicLyric}`; 
                                    fetchData(wyLyric).then(res => {
                                        guiAllLyri.innerHTML = ''; if (res.code === 200) {

                                            const lyricsData = res.lrc.lyric;

                                            const lines = lyricsData.split('\n');

                                            const lyricsArray = lines.map(line => {

                                                const timeEndIndex = line.indexOf(']'); if (timeEndIndex !== -1) {

                                                    const time = convertTimeToSeconds(line.substring(1, timeEndIndex));

                                                    const text = line.substring(timeEndIndex + 1).trim(); return { time, text };
                                                } else { return null; }
                                            }).filter(lyric => lyric !== null); function convertTimeToSeconds(time) {

                                                const [minutes, seconds] = time.split(':').map(parseFloat); return minutes * 60 + seconds;
                                            } lyricsArray.forEach(lyric => {

                                                const lisEle = document.createElement('li'); lisEle.classList.add('gui-ly'); lisEle.textContent = lyric.text; guiAllLyri.appendChild(lisEle);
                                            }); function updateLyricDisplay() {

                                                const currentTime = guiMusicAudio.currentTime; for (
                                                    let i = 0; i < lyricsArray.length; i++) {

                                                    const lisEle = guiAllLyri.children[i]; if (lisEle) { lisEle.classList.remove('gui-textShow'); }
                                                }
                                                let currentLyricIndex; for (
                                                    let j = 0; j < lyricsArray.length; j++) { if (currentTime >= lyricsArray[j].time) { currentLyricIndex = j; if (j < lyricsArray.length - 1 && currentTime >= lyricsArray[j + 1].time) { continue; } break; } }

                                                const lisEle = guiAllLyri.children[currentLyricIndex]; if (lisEle) { lisEle.classList.add('gui-textShow'); }
                                            } guiMusicAudio.removeEventListener('timeupdate', updateLyricDisplay); guiMusicAudio.addEventListener('timeupdate', updateLyricDisplay);
                                        }
                                    }).catch(error => console.error(`歌词获取失败：${error}`));
                                }
                            }; updateSong(currentSongIndex);

                            const prevMusic = () => { isFunctionTriggered = true; currentSongIndex = (currentSongIndex - 1 + songsItem.length) % songsItem.length; updateSong(currentSongIndex); };

                            const nextMusic = () => { isFunctionTriggered = true; currentSongIndex = (currentSongIndex + 1) % songsItem.length; updateSong(currentSongIndex); }; songsItem.forEach((item, index) => { item.addEventListener('click', () => { isFunctionTriggered = true; currentSongIndex = index; updateSong(currentSongIndex); }); }); nextSong.addEventListener('click', nextMusic); previousSong.addEventListener('click', prevMusic); window.addEventListener('keyup', e => { e = event; if (e.key === 'ArrowRight' || e.keyCode === 39) { isFunctionTriggered = true; currentSongIndex = (currentSongIndex + songsItem.length + 2) % songsItem.length; updateSong(currentSongIndex); } if (e.key === 'ArrowLeft' || e.keyCode === 37) { prevMusic(); } }); guiMusicAudio.addEventListener('timeupdate', () => {

                                const currentTime = guiMusicAudio.currentTime;

                                const duration = guiMusicAudio.duration;

                                const progress = (currentTime / duration) * 100; audioProgress.style.width = `${progress}%`; if (progress === 100) { nextMusic(); }
                            });

                            const currentMusic = () => { if (musicPicture.src === "" || songName.textContent === "") { nextMusic(); pauseMusic(); removebePlaying(); displayPopup('音乐已停止播放！'); } }; currentMusic(); lazyLoadImages();
                        });
                    } catch (error) { console.error(`发生错误：${error}`); }
                }; playBackAndForth();

                const elementDetection = setTimeout(() => {

                    const lis = [...listOfSongs.querySelectorAll('.gui-songsItem')]; if (lis.length === 0 || MusicPlayerMain.style.opacity === '0' || lis.length < lisNum) { console.warn('检测元素渲染异常，计划重新执行中...'); listOfSongs.innerHTML = ''; playBackAndForth(); lazyLoadImages(); clearTimeout(elementDetection); } else { console.log('%c DOM元素渲染成功!', 'color: skyblue'); clearTimeout(elementDetection); }
                }, 3000);
                let isSliding = false;

                const startSlide = e => { isSliding = true; slide(e); playMusic(); addPlaying(); };

                const slide = e => {
                    if (!isSliding) { return; }

                    const containerRect = totalAudioProgress.getBoundingClientRect();

                    const clickX = e.clientX - containerRect.left;

                    const containerWidth = containerRect.width;

                    const clickProgress = (clickX / containerWidth) * 100;

                    const duration = guiMusicAudio.duration;

                    const newTime = (clickProgress / 100) * duration; guiMusicAudio.currentTime = newTime;
                };

                const endSlide = () => { isSliding = false; }; totalAudioProgress.addEventListener('mousedown', startSlide); totalAudioProgress.addEventListener('mousemove', slide); totalAudioProgress.addEventListener('mouseup', endSlide); totalAudioProgress.addEventListener('mouseleave', endSlide); playlistBtn.addEventListener('click', () => {

                    const showSong = MusicPlayer.getElementsByClassName('gui-outsideSongListShow').length; showSong ? outsideSongList.classList.remove('gui-outsideSongListShow') : outsideSongList.classList.add('gui-outsideSongListShow');
                });
                let throughDisplayDiv;

                const goThroughShowAndLeaveHidden = () => {
                    if (!throughDisplayDiv) {

                        const throughDisplayDiv = document.createElement('div'); throughDisplayDiv.classList.add('gui-throughDisplay'); playerBody.appendChild(throughDisplayDiv);
                    }

                    const throughDisplay = document.querySelector('.gui-throughDisplay');

                    const arr = [previousSong, playbackControl, nextSong, audioFrequency, playlistBtn]; function handleMouseEnter(event) {

                        const mouseX = event.pageX;

                        const mouseY = event.pageY; throughDisplay.style.left = `${mouseX + 15}px`; throughDisplay.style.top = `${mouseY}px`; switch (this) { case previousSong: eleShow('上一首'); break; case playbackControl: eleShow('播放音乐'); break; case nextSong: eleShow('下一首'); break; case audioFrequency: eleShow('音量设置'); break; case playlistBtn: eleShow('查看歌单'); break; default: eleHidden(); }
                    }

                    const eleShow = text => { throughDisplay.style.display = 'block'; throughDisplay.textContent = text; };

                    const eleHidden = () => throughDisplay.style.display = 'none'; for (
                        let i = 0; i < arr.length; i++) {

                        const ele = arr[i]; ele.addEventListener('mouseenter', handleMouseEnter); ele.addEventListener('mouseleave', eleHidden); ele.addEventListener('click', eleHidden);
                    }
                }; goThroughShowAndLeaveHidden();
            }; clickControl();

            const switchPlayerFun = () => {

                const playerToggleClasses = () => { switchArrow.classList.toggle('gui-jiantou1'); MusicPlayerMain.classList.toggle('gui-playerShow'); }; switchPlayer.addEventListener('click', playerToggleClasses); document.addEventListener('click', function (event) { if (!MusicPlayer.contains(event.target)) { switchArrow.classList.remove('gui-jiantou1'); MusicPlayerMain.classList.remove('gui-playerShow'); } });
            }; switchPlayerFun(); guiMusicAudio.remove();
        }
    }

    const message = '本站自豪的采用笒鬼鬼音乐播放器';

    const description = 'https://y.cenguigui.cn/';

    const printStyle = ['padding: 5px 10px; border-radius: 5px 0 0 5px; background-color: #8b52ec; font-weight: bold;', 'padding: 5px 10px; border-radius: 0 5px 5px 0; background-color: #a17eff; font-weight: bold;']; console.log(`%c${message}%c${description}`, printStyle[0], printStyle[1]);
});