<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>天地蜉蝣</title>
  
  <subtitle>朝菌不知晦朔，蟪蛄不知春秋</subtitle>
  <link href="https://www.zengxpmaster.fun/atom.xml" rel="self"/>
  
  <link href="https://www.zengxpmaster.fun/"/>
  <updated>2024-10-03T16:02:19.000Z</updated>
  <id>https://www.zengxpmaster.fun/</id>
  
  <author>
    <name>zengxpmaster</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>近况说明</title>
    <link href="https://www.zengxpmaster.fun/2024-10/%E8%BF%91%E5%86%B5%E8%AF%B4%E6%98%8E.html"/>
    <id>https://www.zengxpmaster.fun/2024-10/%E8%BF%91%E5%86%B5%E8%AF%B4%E6%98%8E.html</id>
    <published>2024-10-03T16:02:19.000Z</published>
    <updated>2024-10-03T16:02:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>好久没更新了ㅤ<br>这条post主要讲讲 该网站的发展，最近发生在我身上的事，以及以后的更新频率</p><span id="more"></span><h1 id="发展线"><a href="#发展线" class="headerlink" title="发展线"></a>发展线</h1><p>在2023年11月偶然发现<a href="https://www.aliyun.com/daily-act/ecs/99program">阿里云ECS-99计划</a>，即2H2G3M的ECS服务器99元一年，闲来无事买了一台，先前有过玩 腾讯云服务器CVM 的经历<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="后续会更新">[1]</span></a></sup>，便有了写blog的想法。主要是分享自己的一些见闻，如有谬误，还望不吝赐教！</p><h2 id="2023年"><a href="#2023年" class="headerlink" title="2023年"></a>2023年</h2><p>网站初次建成，其中选择博客框架时在 <a href="https://wordpress.com/zh-cn/">WordPress</a> 和 <a href="https://www.zblogcn.com/">Z-Blog</a> 中反复横跳，最终决定使用 Z-Blog 因为 WordPress 对机器开销太大，2H2G时不时占用90%+。服务器后台管理选择<a href="https://www.bt.cn/new/index.html">宝塔面板</a><small><del>破解版</del></small>，域名在腾讯云注册的”.ltd”一元一年。</p><h3 id="11月至次年4月"><a href="#11月至次年4月" class="headerlink" title="11月至次年4月"></a>11月至次年4月</h3><p>域名于11月12日通过ICP备案，于11月底通过了公安备案。</p><p>在这长达5个月内仅仅更新了两篇文章：</p><ol><li>在Windows上使用<a href="https://mcsmanager.com/">MCManager</a>搭建Minecraft Server</li><li>Visual Studio Code设置中文方法</li></ol><h2 id="2024年"><a href="#2024年" class="headerlink" title="2024年"></a>2024年</h2><p>看到了 <a href="https://pages.github.com/">GitHub Page</a> 项目，便打算搭建一个静态博客，由于不习惯 <a href="https://jekyllrb.com/">Jekyll</a> 的写作方式，便使用 <a href="https://hexo.io/zh-cn/">Hexo</a> 本地生成</p><h3 id="5月"><a href="#5月" class="headerlink" title="5月"></a>5月</h3><p>月初，我鼓足勇气，找我暗恋着的发小聊天，想着能不能在今年成了这事。不知是羡慕大学室友甜甜的恋爱，还是单身久了，孤独惯了，想尝试新的生活。过年时与发小的见面，她那可爱的身影，久久挥之不去。</p><p>写了两篇文章：</p><ol><li><a href="../2024-05/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html">如何搭建个人博客</a></li><li><a href="../2024-05/%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E6%A0%A1%E5%9B%AD%E7%BD%91%E5%A4%9A%E8%AE%BE%E5%A4%87%E9%99%90%E5%88%B6.html">如何破解校园网多设备限制</a><small><del>《新建文件夹》</del></small></li></ol><h3 id="9月至10月"><a href="#9月至10月" class="headerlink" title="9月至10月"></a>9月至10月</h3><p>更换了博客的主题，自己设计了logo，进一步掌握git指令、Markdown语法，逐渐习惯大学生活、品尝寂寞。</p><h1 id="涟漪"><a href="#涟漪" class="headerlink" title="涟漪"></a>涟漪</h1><p>她的出现打乱了我的计划。</p><p>我原本计划着这个暑假考取 摩托车驾驶证(D)，然后在暑假期间好好地帮父亲修电视，陪陪父母。</p><p>我去外面打暑假工了，留着位置给她。本以为她会给我一次机会，想着马上就是七夕节，得乘此机会表白，可惜最终大梦一场，归于虚无。</p><p>我始终知道我想要什么，需要什么，留有何许遗憾，即便现阶段没有长远的目标。我敢于直面内心，敢于改正不足。</p><p>我清楚地知道，人与人的路都是不可复制的。我走在我自己的人生路上，哪怕路途的风雨再大，大到我步履维艰。哪怕荆棘丛生，刺得我伤痕遍布。我也仍旧痴痴笑笑，我体会此中滋味，我相信独游的小船终有一天，会看见两岸群山青翠，虫鸟同鸣。</p><h1 id="更新频率"><a href="#更新频率" class="headerlink" title="更新频率"></a>更新频率</h1><p>其实也没啥明确的更新频率，想起来就更</p><section class="footnotes"><h3>参考</h3><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>后续会更新<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <summary type="html">&lt;p&gt;好久没更新了ㅤ&lt;br&gt;这条post主要讲讲 该网站的发展，最近发生在我身上的事，以及以后的更新频率&lt;/p&gt;</summary>
    
    
    
    <category term="生活" scheme="https://www.zengxpmaster.fun/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>如何破解校园网多设备限制</title>
    <link href="https://www.zengxpmaster.fun/2024-05/%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E6%A0%A1%E5%9B%AD%E7%BD%91%E5%A4%9A%E8%AE%BE%E5%A4%87%E9%99%90%E5%88%B6.html"/>
    <id>https://www.zengxpmaster.fun/2024-05/%E5%A6%82%E4%BD%95%E7%A0%B4%E8%A7%A3%E6%A0%A1%E5%9B%AD%E7%BD%91%E5%A4%9A%E8%AE%BE%E5%A4%87%E9%99%90%E5%88%B6.html</id>
    <published>2024-05-11T04:00:00.000Z</published>
    <updated>2024-10-02T16:02:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>理解校园网检测多设备原理ㅤ<br>使用 OpenWrt 破除校园网多设备限制</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>文章引用 <u>SunBK201</u> 大佬 <a href="https://www.sunbk201.site/posts/crack-campus-network/">校园网共享上网检测机制的研究与解决方案</a><br><a href="https://www.sunbk201.site/posts/crack-campus-network/">https://www.sunbk201.site/posts/crack-campus-network/</a></p></blockquote><div class="note note-danger">            <p style="color:#fb4b00">CAUTION</p><small>本条推文非教程向，<big><del>网络巨婴</del></big>请自觉离开</small>          </div><p>校园网，禁止单一账号下多设备同时访问互联网。</p><h2 id="本校校园网网络环境的说明"><a href="#本校校园网网络环境的说明" class="headerlink" title="本校校园网网络环境的说明"></a>本校校园网网络环境的说明</h2><ul><li>校园网网络硬件设备：锐捷三层交换机（目前已知）</li><li>校园网认证系统：Dr.com Web Portal 认证</li><li>校园网网络防火墙安全方案：深信服</li></ul><h1 id="校园网共享上网检测机制-1"><a href="#校园网共享上网检测机制-1" class="headerlink" title="校园网共享上网检测机制[1]"></a>校园网共享上网检测机制<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://www.sunbk201.site/posts/crack-campus-network/">[1]</span></a></sup></h1><p>目前已知的（可能）存在的有：</p><ul><li>基于 IPv4 数据包包头内的 TTL 字段的检测</li><li>基于 HTTP 数据包请求头内的 User-Agent 字段的检测</li><li>DPI (Deep Packet Inspection) 深度包检测技术</li><li>基于 IPv4 数据包包头内的 Identification 字段的检测</li><li>基于网络协议栈时钟偏移的检测技术</li><li>Flash Cookie 检测技术</li></ul><h2 id="基于-IPv4-数据包包头内的-TTL-字段的检测"><a href="#基于-IPv4-数据包包头内的-TTL-字段的检测" class="headerlink" title="基于 IPv4 数据包包头内的 TTL 字段的检测"></a>基于 IPv4 数据包包头内的 TTL 字段的检测</h2><blockquote><p>存活时间（Time To Live，TTL），指一个数据包在经过一个路由器时，可传递的最长距离（跃点数）。 每当数据包经过一个路由器时，其存活次数就会被减一。当其存活次数为0时，路由器便会取消该数据包转发，IP网络的话，会向原数据包的发出者发送一个ICMP TTL数据包以告知跃点数超限。其设计目的是防止数据包因不正确的路由表等原因造成的无限循环而无法送达及耗尽网络资源。</p></blockquote><p>这是一个比较有效且合理的检测技术，IPv4数据包下存在 TTL（Time To Live）这一字段，数据包每经过一个路由器（即经过一个网段），该TTL值就会减一。</p><p>不同的操作系统的默认 TTL 值是不同的，Windows 是 128， macOS&#x2F;iOS、Linux 是 64。</p><p>因此如果我们自己接入路由器到校园网，我们的通过路由器的数据包会变为 127 或 63，一旦校园网抓包检测到这种数据包TTL不是128或64，就会判定为用户接入了路由器。</p><h2 id="基于-HTTP-数据包请求头内的-User-Agent-字段的检测"><a href="#基于-HTTP-数据包请求头内的-User-Agent-字段的检测" class="headerlink" title="基于 HTTP 数据包请求头内的 User-Agent 字段的检测"></a>基于 HTTP 数据包请求头内的 User-Agent 字段的检测</h2><p>HTTP 数据包请求头存在一个叫做 User-Agent 的字段，该字段通常能够标识出操作系统类型，例如：</p><figure><div class="code-wrapper"><pre class="line-numbers language-Apache" data-language="Apache"><code class="language-Apache">Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;89.0.4389.72 Safari&#x2F;537.36 Edg&#x2F;89.0.774.45Mozilla&#x2F;5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X; en-us) AppleWebKit&#x2F;531.21.10 (KHTML, like Gecko) Mobile&#x2F;7B405</code></pre></div></figure><p>校园网会通过多次抓包检测此字段，若发现同时出现例如Windows NT 10.0 iPad 的字段，则判定存在多设备上网。</p><h2 id="DPI-Deep-Packet-Inspection-深度包检测技术"><a href="#DPI-Deep-Packet-Inspection-深度包检测技术" class="headerlink" title="DPI (Deep Packet Inspection) 深度包检测技术"></a>DPI (Deep Packet Inspection) 深度包检测技术</h2><p>这个检测方案比较先进，检测系统会抓包分析应用层的流量，根据不同应用程序的数据包的特征值来判断出是否存在多设备上网。</p><p>具体可参考：<a href="https://patents.google.com/patent/CN106411644A/zh">基于 DPI 技术的网络共享设备检测方法及系统</a></p><p>此种方式已确认在锐捷相关设备上应用，当由于此项功能极耗费性能，因此有些学校可能不会开启此项功能。</p><h2 id="基于-IPv4-数据包包头内的-Identification-字段的检测"><a href="#基于-IPv4-数据包包头内的-Identification-字段的检测" class="headerlink" title="基于 IPv4 数据包包头内的 Identification 字段的检测"></a>基于 IPv4 数据包包头内的 Identification 字段的检测</h2><p>IP 报文首部存在一个叫做 Identification 的字段，此字段用来唯一标识一个 IP 报文，在实际的应用中通常把它当做一个计数器，一台主机依次发送的IP数据包内的 Identification 字段会对应的依次递增，同一时间段内，而不同设备的 Identification 字段的递增区间一般是不同的，因此校园网可以根据一段时间内递增区间的不同判断出是否存在多设备共享上网。 具体可以参考此专利：<a href="https://patents.google.com/patent/CN104836700A/zh">基于 IPID 和概率统计模型的 NAT 主机个数检测方法</a></p><p>不过经过我的抓包分析，Windows 的 TCP&#x2F;IP 协议栈对 Identification 字段的实现是递增，而 iOS 的实现是保持全 0，因此校园网是否使用了该检测机制有待商榷。</p><h2 id="基于网络协议栈时钟偏移的检测技术"><a href="#基于网络协议栈时钟偏移的检测技术" class="headerlink" title="基于网络协议栈时钟偏移的检测技术"></a>基于网络协议栈时钟偏移的检测技术</h2><p>不同主机物理时钟偏移不同，网络协议栈时钟与物理时钟存在对应关系，不同主机发送报文频率与时钟存在统计对应关系，通过特定的频谱分析算法，发现不同的网络时钟偏移来确定不同主机。</p><p>具体可以参考此专利：<a href="https://patents.google.com/patent/CN111970173A/zh">一种基于时钟偏移的加密流量共享检测方法与装置</a></p><p>此种方式具有一定的实验性，因此我不认为此种方式投入了商用。</p><h2 id="Flash-Cookie-检测技术"><a href="#Flash-Cookie-检测技术" class="headerlink" title="Flash Cookie 检测技术"></a>Flash Cookie 检测技术</h2><p>该技术已经用不到了，Flash 都凉了… 不过还是提一下。 Flash Cookie 会记录用户在访问 Flash 网页的时候保留的信息，只要当用户打开浏览器去上网，那么就能被 AC 记录到 Flash Cookie 的特征值，由于 Flash Cookie 不容易被清除，而且具有针对每个用户具有唯一，并且支持跨浏览器，所以被用于做防共享检测。</p><p>具体参考：<a href="https://bbs.sangfor.com.cn/plugin.php?id=sangfor_databases:index&mod=viewdatabase&tid=6273">深信服防共享测试指导书</a></p><h1 id="防共享上网检测的解决方案"><a href="#防共享上网检测的解决方案" class="headerlink" title="防共享上网检测的解决方案"></a>防共享上网检测的解决方案</h1><p>对于校园网重重的检测，我们似乎已经不可能从终端级提出一个完美的解决方案，因此，下面的解决方案都是基于网关级的。简单来说，我们需要在路由器上动手脚。</p><p>路由器固件我们选择 OpenWrt，这是一个开源的路由器系统，允许我们自定义其系统内核以及添加自定义插件。</p><h2 id="针对基于-IPv4-数据包包头内的-TTL-字段的检测的解决方案"><a href="#针对基于-IPv4-数据包包头内的-TTL-字段的检测的解决方案" class="headerlink" title="针对基于 IPv4 数据包包头内的 TTL 字段的检测的解决方案"></a>针对基于 IPv4 数据包包头内的 TTL 字段的检测的解决方案</h2><p>应对思路很简单：修改 TTL 为固定值。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 在 OpenWrt 上安装必要的软件包opkg update &amp;&amp; opkg install iptables-mod-ipopt kmod-ipt-ipopt</code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-Apache" data-language="Apache"><code class="language-Apache"># 加入以下防火墙规则iptables -t mangle -A POSTROUTING -j TTL --ttl-set 64</code></pre></div></figure><h2 id="针对基于-HTTP-数据包请求头内的-User-Agent-字段的检测的解决方案"><a href="#针对基于-HTTP-数据包请求头内的-User-Agent-字段的检测的解决方案" class="headerlink" title="针对基于 HTTP 数据包请求头内的 User-Agent 字段的检测的解决方案"></a>针对基于 HTTP 数据包请求头内的 User-Agent 字段的检测的解决方案</h2><p>应对思路：统一所有终端的 User-Agent </p><p>这一点实现起来有点困难，目前实测有三种解决方案。</p><h3 id="方案一：使用-UA2F-修改-UA"><a href="#方案一：使用-UA2F-修改-UA" class="headerlink" title="方案一：使用 UA2F 修改 UA"></a>方案一：使用 UA2F 修改 UA</h3><p>UA2F 可以修改所有端口的数据包，而且性能不错，不过依旧需要编译。 具体参见：<a href="https://github.com/Zxilly/UA2F">Zxilly&#x2F;UA2F</a>。</p><p>验证方式：<a href="http://ua.233996.xyz/">UA 检测-HTTP</a></p><h3 id="方案二：UA3F"><a href="#方案二：UA3F" class="headerlink" title="方案二：UA3F"></a>方案二：UA3F</h3><p><a href="https://blog.sunbk201.site/posts/ua3f/">校园网防检测: UA3F - 新一代 UA 修改方法</a></p><h3 id="方案三：使用代理客户端将流量全加密"><a href="#方案三：使用代理客户端将流量全加密" class="headerlink" title="方案三：使用代理客户端将流量全加密"></a>方案三：使用代理客户端将流量全加密</h3><p>Clash 不支持 URL 重写，可以使用 Clash 走规则匹配，把 HTTP 流量全都加密。</p><p>如果不想在自己的终端上长时间开启代理，可以在 OpenWrt 中使用 OpenClash 或 ShellClash 进行网关级修改。</p><h2 id="针对基于-IPv4-数据包包头内的-Identification-字段的检测的解决方案"><a href="#针对基于-IPv4-数据包包头内的-Identification-字段的检测的解决方案" class="headerlink" title="针对基于 IPv4 数据包包头内的 Identification 字段的检测的解决方案"></a>针对基于 IPv4 数据包包头内的 Identification 字段的检测的解决方案</h2><p>应对思路：修改所有数据包的 ID 字段为递增。</p><p>我们使用 <a href="https://github.com/CHN-beta/rkp-ipid">rkp-ipid</a> 这一内核模块进行修改。<br>进入 OpenWrt 防火墙设置，在 自定义设置 中填入以下内容:</p><figure><div class="code-wrapper"><pre class="line-numbers language-Apache" data-language="Apache"><code class="language-Apache"># 设置所有发出的数据包的 IPID 为递增iptables -t mangle -N IPID_MODiptables -t mangle -A FORWARD -j IPID_MODiptables -t mangle -A OUTPUT -j IPID_MODiptables -t mangle -A IPID_MOD -d 0.0.0.0&#x2F;8 -j RETURNiptables -t mangle -A IPID_MOD -d 127.0.0.0&#x2F;8 -j RETURN# iptables -t mangle -A IPID_MOD -d 10.0.0.0&#x2F;8 -j RETURNiptables -t mangle -A IPID_MOD -d 172.16.0.0&#x2F;12 -j RETURNiptables -t mangle -A IPID_MOD -d 192.168.0.0&#x2F;16 -j RETURNiptables -t mangle -A IPID_MOD -d 255.0.0.0&#x2F;8 -j RETURNiptables -t mangle -A IPID_MOD -j MARK --set-xmark 0x10&#x2F;0x10</code></pre></div></figure><h2 id="针对基于网络协议栈时钟偏移的检测技术的解决方案"><a href="#针对基于网络协议栈时钟偏移的检测技术的解决方案" class="headerlink" title="针对基于网络协议栈时钟偏移的检测技术的解决方案"></a>针对基于网络协议栈时钟偏移的检测技术的解决方案</h2><p>应对思路：在局域网中建立 NTP 服务器统一时间戳</p><p>进入 OpenWrt 系统设置, 勾选 Enable NTP client（启用 NTP 客户端）和 Provide NTP server（作为 NTP 服务器提供服务）</p><p>NTP server candidates（候选 NTP 服务器）四个框框分别填写:</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">ntp1.aliyun.com, time1.cloud.tencent.com, stdtime.gov.hk, pool.ntp.org</code></pre></div></figure><p>进入 OpenWrt 防火墙设置，在 自定义设置 中填入以下内容:</p><figure><div class="code-wrapper"><pre class="line-numbers language-Apache" data-language="Apache"><code class="language-Apache"># 防时钟偏移检测iptables -t nat -N ntp_force_localiptables -t nat -I PREROUTING -p udp --dport 123 -j ntp_force_localiptables -t nat -A ntp_force_local -d 0.0.0.0&#x2F;8 -j RETURNiptables -t nat -A ntp_force_local -d 127.0.0.0&#x2F;8 -j RETURNiptables -t nat -A ntp_force_local -d 192.168.0.0&#x2F;16 -j RETURNiptables -t nat -A ntp_force_local -s 192.168.0.0&#x2F;16 -j DNAT --to-destination 192.168.1.1# 最后的 192.168.1.1 需要修改为路由器网关地址</code></pre></div></figure><h2 id="针对-Flash-Cookie-检测技术的解决方案"><a href="#针对-Flash-Cookie-检测技术的解决方案" class="headerlink" title="针对 Flash Cookie 检测技术的解决方案"></a>针对 Flash Cookie 检测技术的解决方案</h2><p>应对思路：iptables 拒绝 AC 进行 Flash 检测<br>进入 OpenWrt 防火墙设置，在 自定义设置 中填入以下内容:</p><figure><div class="code-wrapper"><pre class="line-numbers language-Apache" data-language="Apache"><code class="language-Apache"># iptables 拒绝 AC 进行 Flash 检测iptables -I FORWARD -p tcp --sport 80 --tcp-flags ACK ACK -m string --algo bm --string &quot; src&#x3D;\&quot;http:&#x2F;&#x2F;1.1.1.&quot; -j DROP</code></pre></div></figure><h2 id="针对-DPI-Deep-Packet-Inspection-深度包检测技术的解决方案"><a href="#针对-DPI-Deep-Packet-Inspection-深度包检测技术的解决方案" class="headerlink" title="针对 DPI (Deep Packet Inspection) 深度包检测技术的解决方案"></a>针对 DPI (Deep Packet Inspection) 深度包检测技术的解决方案</h2><p>应对思路：加密数据包。</p><p>我们无法通过修改数据包来防止 DPI 检测，因此加密是最好的手段。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>对于认为修改 UA IPID 太过麻烦的同学，可以直接对自己的流量进行全加密，前提是你的有充足的加密解密代理服务器</p><p>下面我给出最终全部的配置脚本：</p><figure><div class="code-wrapper"><pre class="line-numbers language-Apache" data-language="Apache"><code class="language-Apache"># @SunBK201 - https:&#x2F;&#x2F;blog.sunbk201.siteiptables -t nat -A PREROUTING -p udp --dport 53 -j REDIRECT --to-ports 53iptables -t nat -A PREROUTING -p tcp --dport 53 -j REDIRECT --to-ports 53# 通过 rkp-ipid 设置 IPIDiptables -t mangle -N IPID_MODiptables -t mangle -A FORWARD -j IPID_MODiptables -t mangle -A OUTPUT -j IPID_MODiptables -t mangle -A IPID_MOD -d 0.0.0.0&#x2F;8 -j RETURNiptables -t mangle -A IPID_MOD -d 127.0.0.0&#x2F;8 -j RETURN# 由于本校局域网是A类网，所以我将这一条注释掉了，具体要不要注释结合你所在的校园网# iptables -t mangle -A IPID_MOD -d 10.0.0.0&#x2F;8 -j RETURNiptables -t mangle -A IPID_MOD -d 172.16.0.0&#x2F;12 -j RETURNiptables -t mangle -A IPID_MOD -d 192.168.0.0&#x2F;16 -j RETURNiptables -t mangle -A IPID_MOD -d 255.0.0.0&#x2F;8 -j RETURNiptables -t mangle -A IPID_MOD -j MARK --set-xmark 0x10&#x2F;0x10# ua2f 改UAiptables -t mangle -N ua2f# 由于本校局域网是A类网，所以我将这一条注释掉了，具体要不要注释结合你所在的校园网# iptables -t mangle -A ua2f -d 10.0.0.0&#x2F;8 -j RETURNiptables -t mangle -A ua2f -d 127.0.0.0&#x2F;8 -j RETURNiptables -t mangle -A ua2f -d 192.168.0.0&#x2F;16 -j RETURN # 不处理流向保留地址的包iptables -t mangle -A ua2f -p tcp --dport 443 -j RETURN # 不处理 httpsiptables -t mangle -A ua2f -p tcp --dport 22 -j RETURN # 不处理 SSH iptables -t mangle -A ua2f -p tcp --dport 80 -j CONNMARK --set-mark 44iptables -t mangle -A ua2f -m connmark --mark 43 -j RETURN # 不处理标记为非 http 的流 (实验性)iptables -t mangle -A ua2f -m set --set nohttp dst,dst -j RETURNiptables -t mangle -A ua2f -j NFQUEUE --queue-num 10010  iptables -t mangle -A FORWARD -p tcp -m conntrack --ctdir ORIGINAL -j ua2fiptables -t mangle -A FORWARD -p tcp -m conntrack --ctdir REPLY# 防时钟偏移检测iptables -t nat -N ntp_force_localiptables -t nat -I PREROUTING -p udp --dport 123 -j ntp_force_localiptables -t nat -A ntp_force_local -d 0.0.0.0&#x2F;8 -j RETURNiptables -t nat -A ntp_force_local -d 127.0.0.0&#x2F;8 -j RETURNiptables -t nat -A ntp_force_local -d 192.168.0.0&#x2F;16 -j RETURNiptables -t nat -A ntp_force_local -s 192.168.0.0&#x2F;16 -j DNAT --to-destination 192.168.1.1# 通过 iptables 修改 TTL 值iptables -t mangle -A POSTROUTING -j TTL --ttl-set 64# iptables 拒绝 AC 进行 Flash 检测iptables -I FORWARD -p tcp --sport 80 --tcp-flags ACK ACK -m string --algo bm --string &quot; src&#x3D;\&quot;http:&#x2F;&#x2F;1.1.1.&quot; -j DROP  </code></pre></div></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>具体操作见：<a href="https://www.notion.so/OpenWrt-f59ae1a76741486092c27bc24dbadc59">OpenWrt 编译与防检测部署教程</a></p><p>最后，感谢开发 OpenWrt 防检测模块的作者们 <a href="https://github.com/Zxilly">Zxilly</a>、 <a href="https://github.com/CHN-beta">CHN-beta</a> 、<a href="https://github.com/SunBK201/UA3F">SunBK201</a></p><section class="footnotes"><h3>参考</h3><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.sunbk201.site/posts/crack-campus-network/">https://www.sunbk201.site/posts/crack-campus-network/</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <summary type="html">&lt;p&gt;理解校园网检测多设备原理ㅤ&lt;br&gt;使用 OpenWrt 破除校园网多设备限制&lt;/p&gt;</summary>
    
    
    
    <category term="技术分享" scheme="https://www.zengxpmaster.fun/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="OpenWrt" scheme="https://www.zengxpmaster.fun/tags/OpenWrt/"/>
    
  </entry>
  
  <entry>
    <title>如何搭建个人博客</title>
    <link href="https://www.zengxpmaster.fun/2024-05/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html"/>
    <id>https://www.zengxpmaster.fun/2024-05/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.html</id>
    <published>2024-05-09T09:36:47.000Z</published>
    <updated>2024-05-09T09:36:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>利用 GitHub Pages 搭建博客ㅤ<br>使用 Hexo 框架搭建博客</p><span id="more"></span><h2 id="Windows-环境搭建博客"><a href="#Windows-环境搭建博客" class="headerlink" title="Windows 环境搭建博客"></a>Windows 环境搭建博客</h2><h3 id="安装-environment"><a href="#安装-environment" class="headerlink" title="安装 environment"></a>安装 environment</h3><ol><li><h4 id="安装-node-js"><a href="#安装-node-js" class="headerlink" title="安装 node.js"></a>安装 node.js</h4><p> 下载地址：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p><p> 建议下载 LTS 版本（即长期支持版本）</p></li><li><h4 id="安装-git-以及-git-gui"><a href="#安装-git-以及-git-gui" class="headerlink" title="安装 git 以及 git gui"></a>安装 git 以及 git gui</h4><p> 下载地址：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a>  </p><p> git gui 建议下载 GitHub Desktop  </p></li><li><h4 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h4></li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install -g hexo-cli</code></pre></div></figure><p>  如果遇到 npm 源问题，可以执行以下命令，更换为国内镜像源</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm config set registry https:&#x2F;&#x2F;registry.npmmirror.com &amp;&amp;npm update  &amp;&amp;npm install -g hexo-cli</code></pre></div></figure><h3 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mkdir &lt;folder_name&gt;         # 创建博客文件夹cd &lt;folder_name&gt;            # 进入博客文件夹hexo init                   # 初始化博客</code></pre></div></figure><h3 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h3><ol><li><h4 id="配置GitHub"><a href="#配置GitHub" class="headerlink" title="配置GitHub"></a>配置GitHub</h4><ul><li>注册GitHub账号</li><li>创建一个仓库，仓库名称为<username>.github.io</li></ul></li><li><h4 id="配置博客"><a href="#配置博客" class="headerlink" title="配置博客"></a>配置博客</h4><p>参考：<a href="https://hexo.io/zh-cn/docs/configuration.html">https://hexo.io/zh-cn/docs/configuration.html</a></p><p>具体配置见_config.yml</p><p>以下为必填项：（只有填了此项，才能让他人访问博客）</p></li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">deploy:   type: git     repo: https:&#x2F;&#x2F;github.com&#x2F;&lt;username&gt;&#x2F;&lt;username&gt;.github.io.git branch: master</code></pre></div></figure><ol start="3"><li><h4 id="运行博客"><a href="#运行博客" class="headerlink" title="运行博客"></a>运行博客</h4></li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean                  # 清空博客hexo generate               # 生成博客hexo server                 # 启动博客</code></pre></div></figure><p>  此时浏览器访问 <a href="http://localhost:4000/">http://localhost:4000/</a> 即可访问博客了</p><p>  再执行下面命令，即可将博客部署到 GitHub</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo deploy                 # 部署博客</code></pre></div></figure><p>  如果发现缺少deployer插件，执行以下命令即可</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install hexo-deployer-git --save</code></pre></div></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;利用 GitHub Pages 搭建博客ㅤ&lt;br&gt;使用 Hexo 框架搭建博客&lt;/p&gt;</summary>
    
    
    
    <category term="技术分享" scheme="https://www.zengxpmaster.fun/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="GitHub" scheme="https://www.zengxpmaster.fun/tags/GitHub/"/>
    
    <category term="Hexo" scheme="https://www.zengxpmaster.fun/tags/Hexo/"/>
    
  </entry>
  
</feed>
